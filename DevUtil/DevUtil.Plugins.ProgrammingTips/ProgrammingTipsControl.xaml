<UserControl x:Class="DevUtil.Plugins.ProgrammingTips.ProgrammingTipsControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             Background="#1E1E1E">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <!-- 상단 툴바 -->
        <Border Grid.Row="0" Background="#2D2D30" Padding="10" BorderBrush="#3F3F46" BorderThickness="0,0,0,1">
            <StackPanel Orientation="Horizontal">
                <ComboBox Width="150" Margin="0,0,10,0" Background="#3F3F46" Foreground="White" BorderThickness="0">
                    <ComboBoxItem Content="전체" IsSelected="True"/>
                    <ComboBoxItem Content="C#"/>
                    <ComboBoxItem Content="WPF"/>
                    <ComboBoxItem Content="Database"/>
                    <ComboBoxItem Content="알고리즘"/>
                </ComboBox>
                <TextBox Width="250" Padding="5" Margin="0,0,10,0" 
                         Background="#3F3F46" Foreground="White" BorderThickness="0"
                         Text="검색..."/>
                <Button Content="검색" Padding="10,5" 
                        Background="#007ACC" Foreground="White" BorderThickness="0"/>
            </StackPanel>
        </Border>
        
        <!-- 팁 목록 -->
        <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto" Margin="10">
            <StackPanel>
                <!-- 팁 카드 1 -->
                <Border Background="#252526" BorderBrush="#3F3F46" BorderThickness="1" 
                        Margin="0,0,0,10" Padding="15">
                    <StackPanel>
                        <TextBlock Text="LINQ를 활용한 컬렉션 필터링" 
                                   Foreground="White" FontSize="16" FontWeight="Bold" 
                                   Margin="0,0,0,10"/>
                        <TextBlock Text="카테고리: C#" Foreground="Gray" 
                                   FontSize="12" Margin="0,0,0,10"/>
                        <TextBlock TextWrapping="Wrap" Foreground="#D4D4D4" LineHeight="20">
                            LINQ(Language Integrated Query)를 사용하면 컬렉션을 간결하게 필터링할 수 있습니다.
                        </TextBlock>
                        <Border Background="#1E1E1E" BorderBrush="#3F3F46" BorderThickness="1" 
                                Margin="0,10,0,0" Padding="10">
                            <TextBlock FontFamily="Consolas" Foreground="#D4D4D4" TextWrapping="Wrap"
                                       Text="var result = list.Where(x => x > 10).ToList();"/>
                        </Border>
                    </StackPanel>
                </Border>
                
                <!-- 팁 카드 2 -->
                <Border Background="#252526" BorderBrush="#3F3F46" BorderThickness="1" 
                        Margin="0,0,0,10" Padding="15">
                    <StackPanel>
                        <TextBlock Text="WPF 데이터 바인딩 기초" 
                                   Foreground="White" FontSize="16" FontWeight="Bold" 
                                   Margin="0,0,0,10"/>
                        <TextBlock Text="카테고리: WPF" Foreground="Gray" 
                                   FontSize="12" Margin="0,0,0,10"/>
                        <TextBlock TextWrapping="Wrap" Foreground="#D4D4D4" LineHeight="20">
                            INotifyPropertyChanged를 구현하여 양방향 데이터 바인딩을 구현할 수 있습니다.
                        </TextBlock>
                        <Border Background="#1E1E1E" BorderBrush="#3F3F46" BorderThickness="1" 
                                Margin="0,10,0,0" Padding="10">
                            <TextBlock FontFamily="Consolas" Foreground="#D4D4D4" TextWrapping="Wrap">
public event PropertyChangedEventHandler PropertyChanged;<LineBreak/>
protected void OnPropertyChanged(string name)<LineBreak/>
{<LineBreak/>
    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));<LineBreak/>
}
                            </TextBlock>
                        </Border>
                    </StackPanel>
                </Border>
                
                <!-- 팁 카드 3 -->
                <Border Background="#252526" BorderBrush="#3F3F46" BorderThickness="1" 
                        Margin="0,0,0,10" Padding="15">
                    <StackPanel>
                        <TextBlock Text="async/await 패턴 활용" 
                                   Foreground="White" FontSize="16" FontWeight="Bold" 
                                   Margin="0,0,0,10"/>
                        <TextBlock Text="카테고리: C#" Foreground="Gray" 
                                   FontSize="12" Margin="0,0,0,10"/>
                        <TextBlock TextWrapping="Wrap" Foreground="#D4D4D4" LineHeight="20">
                            비동기 프로그래밍을 위해 async/await 패턴을 사용하면 UI 블로킹을 방지할 수 있습니다.
                        </TextBlock>
                        <Border Background="#1E1E1E" BorderBrush="#3F3F46" BorderThickness="1" 
                                Margin="0,10,0,0" Padding="10">
                            <TextBlock FontFamily="Consolas" Foreground="#D4D4D4" TextWrapping="Wrap">
public async Task&lt;string&gt; LoadDataAsync()<LineBreak/>
{<LineBreak/>
    return await Task.Run(() => GetData());<LineBreak/>
}
                            </TextBlock>
                        </Border>
                    </StackPanel>
                </Border>
                
                <!-- 팁 카드 4 -->
                <Border Background="#252526" BorderBrush="#3F3F46" BorderThickness="1" 
                        Margin="0,0,0,10" Padding="15">
                    <StackPanel>
                        <TextBlock Text="Entity Framework Core 쿼리 최적화" 
                                   Foreground="White" FontSize="16" FontWeight="Bold" 
                                   Margin="0,0,0,10"/>
                        <TextBlock Text="카테고리: Database" Foreground="Gray" 
                                   FontSize="12" Margin="0,0,0,10"/>
                        <TextBlock TextWrapping="Wrap" Foreground="#D4D4D4" LineHeight="20">
                            Include를 사용하여 Eager Loading으로 N+1 쿼리 문제를 해결할 수 있습니다.
                        </TextBlock>
                        <Border Background="#1E1E1E" BorderBrush="#3F3F46" BorderThickness="1" 
                                Margin="0,10,0,0" Padding="10">
                            <TextBlock FontFamily="Consolas" Foreground="#D4D4D4" TextWrapping="Wrap">
var orders = context.Orders<LineBreak/>
    .Include(o => o.Customer)<LineBreak/>
    .Include(o => o.OrderItems)<LineBreak/>
    .ToList();
                            </TextBlock>
                        </Border>
                    </StackPanel>
                </Border>
            </StackPanel>
        </ScrollViewer>
    </Grid>
</UserControl>