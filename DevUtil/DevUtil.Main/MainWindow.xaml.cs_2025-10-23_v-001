/*
 * SharpDevelop으로 작성되었습니다.
 * 사용자: RYZEN3200G
 * 날짜: 2025-10-23
 * 시간: 오후 12:41
 * 
 * 이 템플리트를 변경하려면 [도구->옵션->코드 작성->표준 헤더 편집]을 이용하십시오.
 */
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using DevUtil.Core;

namespace DevUtil.Main
{
	/// <summary>
	/// Interaction logic for MainWindow.xaml
	/// </summary>
    public partial class MainWindow : Window
    {
        private Dictionary<string, IPluginUserControl> plugins;
        private Dictionary<string, TabItem> openTabs;

        public MainWindow()
        {
            InitializeComponent();
            plugins = new Dictionary<string, IPluginUserControl>();
            openTabs = new Dictionary<string, TabItem>();
            
            LoadPlugins();
        }

        /// <summary>
        /// Plugins 폴더에서 DLL을 로드하고 플러그인 인스턴스 생성
        /// </summary>
        private void LoadPlugins()
        {
            try
            {
                string pluginPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Plugins");
                
                if (!Directory.Exists(pluginPath))
                {
                    Directory.CreateDirectory(pluginPath);
                    MessageBox.Show("Plugins 폴더가 생성되었습니다.\n플러그인 DLL을 해당 폴더에 넣어주세요.", 
                        "정보", MessageBoxButton.OK, MessageBoxImage.Information);
                    return;
                }

                string[] dllFiles = Directory.GetFiles(pluginPath, "DevUtil.Plugins.*.dll");
                
                if (dllFiles.Length == 0)
                {
                	MessageBox.Show(String.Format("Plugins 폴더 경로: {0}\n\n해당 폴더에 'DevUtil.Plugins.*.dll' 파일이 없습니다.\n\n플러그인 DLL 파일을 복사해주세요.",pluginPath),
                        "플러그인 없음", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                foreach (string dllFile in dllFiles)
                {
                    try
                    {
                        Assembly assembly = Assembly.LoadFrom(dllFile);
                        
                        // IPluginUserControl을 구현한 타입 찾기
                        Type[] types = assembly.GetTypes();
                        bool foundPlugin = false;
                        
                        foreach (Type type in types)
                        {
                            if (typeof(IPluginUserControl).IsAssignableFrom(type) && !type.IsInterface && !type.IsAbstract)
                            {
                                IPluginUserControl plugin = (IPluginUserControl)Activator.CreateInstance(type);
                                plugin.Initialize();
                                
                                // 플러그인 태그 이름으로 저장
                                string pluginKey = GetPluginKey(Path.GetFileNameWithoutExtension(dllFile));
                                plugins[pluginKey] = plugin;
                                foundPlugin = true;
                                
                                MessageBox.Show(String.Format("플러그인 로드 성공!\n\n파일: {0}\n타입: {1}\n키: {2}",Path.GetFileName(dllFile),type.FullName,pluginKey),
                                    "로드 성공", MessageBoxButton.OK, MessageBoxImage.Information);
                            }
                        }
                        
                        if (!foundPlugin)
                        {
                        	MessageBox.Show(String.Format( "플러그인 인터페이스를 찾을 수 없음:\n{0}\n\nIPluginUserControl을 구현한 클래스가 있는지 확인하세요.",Path.GetFileName(dllFile)),
                                "경고", MessageBoxButton.OK, MessageBoxImage.Warning);
                        }
                    }
                    catch (Exception ex)
                    {
                    	MessageBox.Show(String.Format("플러그인 로드 실패: {0}\n\n{1}\n\n{2}",Path.GetFileName(dllFile),ex.Message,ex.StackTrace ),
                            "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }

                if (plugins.Count == 0)
                {
                    MessageBox.Show("로드된 플러그인이 없습니다.\nPlugins 폴더에 플러그인 DLL을 확인하세요.", 
                        "정보", MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"플러그인 로드 중 오류: {ex.Message}", 
                    "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// DLL 파일명에서 플러그인 키 추출
        /// </summary>
        private string GetPluginKey(string dllName)
        {
            // DevUtil.Plugins.CodeManager -> CodeManager
            if (dllName.StartsWith("DevUtil.Plugins."))
            {
                return dllName.Substring("DevUtil.Plugins.".Length);
            }
            return dllName;
        }

        /// <summary>
        /// TreeView 아이템 선택 이벤트
        /// </summary>
        private void TreeView_SelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
        {
            TreeView treeView = sender as TreeView;
            TreeViewItem selectedItem = treeView.SelectedItem as TreeViewItem;

            if (selectedItem != null && selectedItem.Tag != null)
            {
                string pluginTag = selectedItem.Tag.ToString();
                OpenPluginTab(pluginTag);
            }
        }

        /// <summary>
        /// 플러그인 탭 열기 (이미 열려있으면 활성화)
        /// </summary>
        private void OpenPluginTab(string pluginKey)
        {
            // 이미 열린 탭이 있으면 활성화
            if (openTabs.ContainsKey(pluginKey))
            {
                MainTabControl.SelectedItem = openTabs[pluginKey];
                return;
            }

            // 플러그인이 로드되어 있는지 확인
            if (!plugins.ContainsKey(pluginKey))
            {
            	MessageBox.Show(String.Format("플러그인을 찾을 수 없습니다: {0}\nPlugins 폴더의 DLL을 확인하세요.",pluginKey),
                    "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            try
            {
                IPluginUserControl plugin = plugins[pluginKey];
                // 매번 새로운 UserControl 인스턴스를 가져옴
                UserControl control = plugin.GetControl();

                TabItem tabItem = new TabItem
                {
                    Header = plugin.PluginName,
                    Content = control,
                    Tag = pluginKey
                };

                MainTabControl.Items.Add(tabItem);
                openTabs[pluginKey] = tabItem;
                MainTabControl.SelectedItem = tabItem;
            }
            catch (Exception ex)
            {
            	MessageBox.Show(String.Format("플러그인 로드 실패: {0}\n{1}\n\n{2}",pluginKey,ex.Message,ex.StackTrace),
                    "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// 탭 닫기 버튼 클릭
        /// </summary>
        private void CloseTab_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;
            TabItem tabItem = button.Tag as TabItem;

            if (tabItem != null && tabItem != StartPageTab)
            {
                string pluginKey = tabItem.Tag as string;
                if (pluginKey != null && openTabs.ContainsKey(pluginKey))
                {
                    openTabs.Remove(pluginKey);
                }

                MainTabControl.Items.Remove(tabItem);
            }
        }

        /// <summary>
        /// 윈도우 종료 시 플러그인 정리
        /// </summary>
        protected override void OnClosed(EventArgs e)
        {
            foreach (var plugin in plugins.Values)
            {
                try
                {
                    plugin.Cleanup();
                }
                catch { }
            }

            base.OnClosed(e);
        }
    }
}